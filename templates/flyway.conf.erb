#
# Copyright 2010-2015 Axel Fontaine
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Jdbc url to use to connect to the database
# Examples
# --------
# Most drivers are included out of the box.
# * = driver must be downloaded and installed in /drivers manually
# DB2*              : jdbc:db2://<host>:<port>/<database>
# Derby             : jdbc:derby:<subsubprotocol:><databaseName><;attribute=value>
# H2                : jdbc:h2:<file>
# Hsql              : jdbc:hsqldb:file:<file>
# Google Cloud SQL* : jdbc:google:mysql://<project-id>:<instance-name>/<database>
# MariaDB           : jdbc:mariadb://<host>:<port>/<database>?<key1>=<value1>&<key2>=<value2>...
# MySQL             : jdbc:mysql://<host>:<port>/<database>?<key1>=<value1>&<key2>=<value2>...
# Oracle*           : jdbc:oracle:thin:@//<host>:<port>/<service>
# PostgreSQL        : jdbc:postgresql://<host>:<port>/<database>?<key1>=<value1>&<key2>=<value2>...
# solidDB*          : jdbc:solid://<host>:<port>?<key1>=<value1>&<key2>=<value2>...
# SQL Azure*        : jdbc:sqlserver://<servername>.database.windows.net;databaseName=<database>
# SQL Server        : jdbc:jtds:sqlserver://<host>:<port>/<database>
# SQLite            : jdbc:sqlite:<database>
# Vertica*          : jdbc:vertica://<host>:<port>/<database>
flyway.url=<%= scope.lookupvar('flyway::config_url') -%>

# Fully qualified classname of the jdbc driver (autodetected by default based on flyway.url)
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_driver') -%>
flyway.driver=<%= scope.lookupvar('flyway::config_driver') -%>
<% else -%>
# flyway.driver=
<% end -%>

# User to use to connect to the database (default: <<null>>)
flyway.user=<%= scope.lookupvar('flyway::config_user') -%>

# Password to use to connect to the database (default: <<null>>)
flyway.password=<%= scope.lookupvar('flyway::config_password') -%>

# Comma-separated list of schemas managed by Flyway. These schema names are case-sensitive.
# (default: The default schema for the datasource connection)
# Consequences:
# - The first schema in the list will be automatically set as the default one during the migration.
# - The first schema in the list will also be the one containing the metadata table.
# - The schemas will be cleaned in the order of this list.
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_schemas') -%>
flyway.schemas=<%= scope.lookupvar('flyway::config_schemas') -%>
<% else -%>
# flyway.schemas=
<% end -%>

# Name of Flyway's metadata table (default: schema_version)
# By default (single-schema mode) the metadata table is placed in the default schema for the connection provided by the datasource.
# When the flyway.schemas property is set (multi-schema mode), the metadata table is placed in the first schema of the list.
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_table') -%>
flyway.table=<%= scope.lookupvar('flyway::config_table') -%>
<% else -%>
# flyway.table=
<% end -%>

# Comma-separated list of locations to scan recursively for migrations. (default: filesystem:<<INSTALL-DIR>>/sql)
# The location type is determined by its prefix.
# Unprefixed locations or locations starting with classpath: point to a package on the classpath and may contain both sql and java-based migrations.
# Locations starting with filesystem: point to a directory on the filesystem and may only contain sql migrations.
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_locations') -%>
flyway.locations=<%= scope.lookupvar('flyway::config_locations') -%>
<% else -%>
# flyway.locations=
<% end -%>

# Comma-separated list of fully qualified class names of custom MigrationResolver to use for resolving migrations.
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_resolvers') -%>
flyway.resolvers=<%= scope.lookupvar('flyway::config_resolvers') -%>
<% else -%>
# flyway.resolvers=
<% end -%>

# Comma-separated list of directories containing JDBC drivers and Java-based migrations. (default: <INSTALL-DIR>/jars)
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_jardirs') -%>
flyway.jarDirs=<%= scope.lookupvar('flyway::config_jardirs') -%>
<% else -%>
# flyway.jarDirs=
<% end -%>

# File name prefix for Sql migrations (default: V )
# Sql migrations have the following file name structure: prefixVERSIONseparatorDESCRIPTIONsuffix ,
# which using the defaults translates to V1_1__My_description.sql
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_sqlmigrationprefix') -%>
flyway.sqlMigrationPrefix=<%= scope.lookupvar('flyway::config_sqlmigrationprefix') -%>
<% else -%>
# flyway.sqlMigrationPrefix=
<% end -%>

# File name separator for Sql migrations (default: __)
# Sql migrations have the following file name structure: prefixVERSIONseparatorDESCRIPTIONsuffix ,
# which using the defaults translates to V1_1__My_description.sql
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_sqlmigrationseparator') -%>
flyway.sqlMigrationSeparator=<%= scope.lookupvar('flyway::config_sqlmigrationseparator') -%>
<% else -%>
# flyway.sqlMigrationSeparator=
<% end -%>

# File name suffix for Sql migrations (default: .sql)
# Sql migrations have the following file name structure: prefixVERSIONseparatorDESCRIPTIONsuffix ,
# which using the defaults translates to V1_1__My_description.sql
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_sqlmigrationsuffix') -%>
flyway.sqlMigrationSuffix=<%= scope.lookupvar('flyway::config_sqlmigrationsuffix') -%>
<% else -%>
# flyway.sqlMigrationSuffix=
<% end -%>

# Encoding of Sql migrations (default: UTF-8)
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_encoding') -%>
flyway.encoding=<%= scope.lookupvar('flyway::config_encoding') -%>
<% else -%>
# flyway.encoding=
<% end -%>

# Whether placeholders should be replaced. (default: true)
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_placeholderreplacement') -%>
flyway.placeholderReplacement=<%= scope.lookupvar('flyway::config_placeholderreplacement') -%>
<% else -%>
# flyway.placeholderReplacement=
<% end -%>

# Placeholders to replace in Sql migrations
# flyway.placeholders.user=
# flyway.placeholders.my_other_placeholder=
<%- if scope.lookupvar('flyway::config_placeholders').empty? != true -%>
<% scope.lookupvar('flyway::config_placeholders').each do |key, val| -%>
flyway.placeholders.<%=key%>=<%=val%>
<% end end -%>

# Prefix of every placeholder (default: ${ )
# flyway.placeholderPrefix=

# Suffix of every placeholder (default: } )
# flyway.placeholderSuffix=

# Target version up to which Flyway should consider migrations.
# The special value 'current' designates the current version of the schema. (default: <<latest version>>)
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_target') -%>
flyway.target=<%= scope.lookupvar('flyway::config_target') -%>
<% else -%>
# flyway.target=
<% end -%>

# Whether to automatically call validate or not when running migrate. (default: true)
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_validateonmigrate') -%>
flyway.validateOnMigrate=<%= scope.lookupvar('flyway::config_validateonmigrate') -%>
<% else -%>
# flyway.validateOnMigrate=
<% end -%>

# Whether to automatically call clean or not when a validation error occurs. (default: false)
# This is exclusively intended as a convenience for development. Even tough we
# strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
# way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
# the next migration will bring you back to the state checked into SCM.
# Warning ! Do not enable in production !
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_cleanonvalidationerror') -%>
flyway.cleanOnValidationError=<%= scope.lookupvar('flyway::config_cleanonvalidationerror') -%>
<% else -%>
# flyway.cleanOnValidationError=
<% end -%>

# The version to tag an existing schema with when executing baseline. (default: 1)
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_baselineversion') -%>
flyway.baselineVersion=<%= scope.lookupvar('flyway::config_baselineversion') -%>
<% else -%>
# flyway.baselineVersion=
<% end -%>

# The description to tag an existing schema with when executing baseline. (default: << Flyway Baseline >>)
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_baselinedescription') -%>
flyway.baselineDescription=<%= scope.lookupvar('flyway::config_baselinedescription') -%>
<% else -%>
# flyway.baselineDescription=
<% end -%>

# Whether to automatically call baseline when migrate is executed against a non-empty schema with no metadata table.
# This schema will then be initialized with the baselineVersion before executing the migrations.
# Only migrations above baselineVersion will then be applied.
# This is useful for initial Flyway production deployments on projects with an existing DB.
# Be careful when enabling this as it removes the safety net that ensures
# Flyway does not migrate the wrong database in case of a configuration mistake! (default: false)
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_baselineonmigrate') -%>
flyway.baselineOnMigrate=<%= scope.lookupvar('flyway::config_baselineonmigrate') -%>
<% else -%>
# flyway.baselineOnMigrate=
<% end -%>

# Allows migrations to be run "out of order" (default: false).
# If you already have versions 1 and 3 applied, and now a version 2 is found,
# it will be applied too instead of being ignored.
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_outoforder') -%>
flyway.outOfOrder=<%= scope.lookupvar('flyway::config_outoforder') -%>
<% else -%>
# flyway.outOfOrder=
<% end -%>

# This allows you to tie in custom code and logic to the Flyway lifecycle notifications (default: empty).
# Set this to a comma-separated list of fully qualified FlywayCallback class name implementations
<% if ![nil, :undef].include? scope.lookupvar('flyway::config_callbacks') -%>
flyway.callbacks=<%= scope.lookupvar('flyway::config_callbacks') -%>
<% else -%>
# flyway.callbacks=
<% end -%>
